rotation = list(lon = -100)
),
lonaxis = list(
showgrid = TRUE,
gridwidth = 0.5,
range = c(-140, -55),
dtick = 5
),
lataxis = list(
showgrid = TRUE,
gridwidth = 0.5,
range = c(20, 60),
dtick = 5
)
)
# separate the information by latitude and longtud.
mass.shootings <-  group_by(mass.shooting.data, lat, lng, killed,injured) %>% summarise(total.victims = sum(killed) + sum(injured))
map <- plot_geo(mass.shootings, lat = ~lat, lon = ~lng, color = ~total.victims) %>%
add_markers(text = ~paste(paste("Victims:",total.victims),paste("Killed:", killed),paste("Injured:",injured), sep = "<br />"), hoverinfo = "text"
) %>% layout(title = 'Mass shootings in 2016, US cities', geo = g)
library(dplyr)
library(knitr)
library(plotly)
# Assignment 6
mass.shooting.data <- read.csv('data/shootings-2016.csv',header = TRUE)
number.of.shooting <- nrow(mass.shooting.data)
number.of.lives.lost <- sum(mass.shooting.data$killed)
number.of.injured <- sum(mass.shooting.data$injured)
# identify the city that is largely affected by mass shooting in 2016.
state.and.city.highest.killed <- filter(mass.shooting.data,killed == max(mass.shooting.data$killed))%>% select(city,state)
state.and.city.highest.injured <- filter(mass.shooting.data,injured== max(mass.shooting.data$injured)) %>% select(city, state)
date.for.the.highest.killed <- filter(mass.shooting.data, killed==max(mass.shooting.data$killed)) %>% select(date)
# Create a table that has general information on state level.
table <- group_by(mass.shooting.data,state) %>% summarise(total.killed = sum(killed), total.injured = sum(injured), total.victims = (total.injured + total.killed), number.of.cases = n())
state.with.highest.shooting.cases <- table[table$number.of.cases == max(table$number.of.cases),]
oakland <- mass.shooting.data[mass.shooting.data$city=='Oakland',]
kable(table)
# interactive graph that contains information of the number of victims, number of shooting incidents and
# how many killed and injured by those incidents.
g <- plot_ly(table, x = ~number.of.cases, y = ~total.victims, color = ~total.victims,
size = ~total.victims, text = ~paste("(","# of shootings",", ","# of victims",")"))
shiny::runApp('C:/Users/Kidus/Desktop/INFO 201/Assignments/a8-building-apps-Kidusyohanes')
runApp('C:/Users/Kidus/Desktop/INFO 201/Assignments/a8-building-apps-Kidusyohanes')
setwd("C:/Users/Kidus/Desktop/INFO 201/Assignments/a8-building-apps-Kidusyohanes")
runApp()
runApp()
#Assignment 8 - Building Apps using Shiny
# Dataset : cereal
#
library(dplyr)
library(shiny)
library(ggplot2)
library(plotly)
cereal <- as.data.frame(read.table(file = 'data/cereal.tsv', header = TRUE))
source('./scripts/ratingsVsCalories.R')
cereal <- group_by(cereal,mfr) %>% mutate(correlation = cor(rating,calories), proteiToFat = protein / fat)
shinyServer(function(input, output) {
output$scatter <- renderPlotly( {
return(RatingsVsSugar(cereal,input$search))
})
output$VitaminEffect <- renderPlot({
#print(input$Vitamins)
x    <- faithful[, 2]  # Old Faithful Geyser data
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = 3, col = 'darkgray', border = 'white')
# colr <- seq(min(cereal$vitamins) ,max(cereal$vitamins), length.out = input$Vitamins + 1)
# cereal <- group_by(cereal,mfr) %>% mutate(correlation = cor(protein,calories), proteiToFat = protein / fat)
#ggplot(cereal, aes(x=input$Vitamins, y=correlation, color=colr))
#p <- plot_ly(cereal, x = ~input$Vitamins, y=~calories, color = ~correlation, type = "box")
})
})
runApp()
cereal <- as.data.frame(read.table(file = 'data/cereal.tsv', header = TRUE))
runApp()
cereal <- as.data.frame(read.table(file = 'data/cereal.tsv', header = TRUE))
cereal <- group_by(cereal,mfr) %>% mutate(correlation = cor(rating,calories), proteiToFat = protein / fat)
source('./scripts/ratingsVsCalories.R')
runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
library(ggplot2)
library(plotly)
RatingsVsSugar <- function(data, search = '', xvar='calories', yvar = 'rating') {
xmax <- max(data[,xvar]) * 1.5
ymax <- max(data[,yvar]) * 1.5
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
data <- data %>%
filter(grepl(search, mfr)) %>% mutate(averageRating = mean(rating))
plot_ly(data=data, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='bar',
marker = list(
opacity = .4,
size = 10
)) %>%
layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>%
return()
}
runApp()
runApp()
library(dplyr)
library(ggplot2)
library(plotly)
RatingsVsSugar <- function(data, search = '', xvar='calories', yvar = 'rating') {
xmax <- max(data[,xvar]) * 1.5
ymax <- max(data[,yvar]) * 1.5
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
data <- data %>%
filter(grepl(search, mfr)) %>% mutate(averageRating = mean(rating))
plot_ly(data=data, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='bar',color = ~xvar,
marker = list(
opacity = .4,
size = 10
)) %>%
layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>%
return()
}
runApp()
RatingsVsSugar <- function(data, search = '', xvar='calories', yvar = 'rating') {
xmax <- max(data[,xvar]) * 1.5
ymax <- max(data[,yvar]) * 1.5
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
data <- data %>%
filter(grepl(search, mfr)) %>% mutate(averageRating = mean(rating))
plot_ly(data=data, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='bar',color = list(range= c(0,xmax)),
marker = list(
opacity = .4,
size = 10
)) %>%
layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>%
return()
}
runApp()
runApp()
RatingsVsSugar <- function(data, search = '', xvar='calories', yvar = 'rating') {
xmax <- max(data[,xvar]) * 1.5
ymax <- max(data[,yvar]) * 1.5
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
data <- data %>%
filter(grepl(search, mfr)) %>% mutate(averageRating = mean(rating))
plot_ly(data=data, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='bar',color = list(range= c(0,xmax)),
marker = list(
opacity = .4,
size = 10
)) %>%
layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>%
return()
}
runApp()
RatingsVsSugar <- function(data, search = '', xvar='calories', yvar = 'rating') {
xmax <- max(data[,xvar]) * 1.5    # fix the range
ymax <- max(data[,yvar]) * 1.5    # >>  >>   >>
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
data <- data %>%
filter(search, mfr) %>% mutate(averageRating = mean(rating))
plot_ly(data=data, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='bar',color = list(range= c(0,xmax)),
marker = list(
opacity = .4,
size = 10
)) %>%
layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>%
return()
}
runApp()
RatingsVsSugar <- function(data, search = '', xvar='calories', yvar = 'rating') {
xmax <- max(data[,xvar]) * 1.5    # fix the range
ymax <- max(data[,yvar]) * 1.5    # >>  >>   >>
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
data <- data %>%
filter(grepl(search, mfr)) %>% mutate(averageRating = mean(rating))
plot_ly(data=data, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='bar',color = ~averageRating,
marker = list(
opacity = .4,
size = 10
)) %>%
layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>%
return()
}
runApp()
runApp()
RatingsVsSugar <- function(data, search = '', xvar='calories', yvar = 'rating', color = 'rating') {
xmax <- max(data[,xvar]) * 1.5    # fix the range
ymax <- max(data[,yvar]) * 1.5    # >>  >>   >>
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
data <- data %>%
filter(grepl(search, mfr)) %>% mutate(averageRating = mean(rating))
plot_ly(data=data, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='bar',color = ~protein,
marker = list(
opacity = .4,
size = 10, color=~protein
)) %>%
layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>%
return()
}
runApp()
RatingsVsSugar <- function(data, search = '', xvar='calories', yvar = 'rating', color = 'rating') {
xmax <- max(data[,xvar]) * 1.5    # fix the range
ymax <- max(data[,yvar]) * 1.5    # >>  >>   >>
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
data <- data %>%
filter(grepl(search, mfr)) %>% mutate(averageRating = mean(rating))
plot_ly(data=data, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='bar',
marker = list(
opacity = .4,
size = 10, color=~protein
)) %>%
layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>%
return()
}
runApp()
RatingsVsSugar <- function(data, search = '', xvar='calories', yvar = 'rating', color = 'protein') {
xmax <- max(data[,xvar]) * 1.5    # fix the range
ymax <- max(data[,yvar]) * 1.5    # >>  >>   >>
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
data <- data %>%
filter(grepl(search, mfr)) %>% mutate(averageRating = mean(rating))
plot_ly(data=data, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='bar',color = protein,
marker = list(
opacity = .4,
size = 10, color=~protein
)) %>%
layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>%
return()
}
runApp()
runApp()
range(cereal[,"protein"])
range(cereal[,"calories"])
range(cereal[,"fat"])
RatingsVsSugar <- function(data, search = '', xvar='calories', yvar = 'rating', color = 'protein') {
xmax <- max(data[,xvar]) * 1.5    # fix the range
ymax <- max(data[,yvar]) * 1.5    # >>  >>   >>
colr <- range(data[,"protein"])
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
colr.equation  <- paste0('~', color)
data <- data %>%
filter(grepl(search, mfr)) %>% mutate(averageRating = mean(rating))
plot_ly(data=data, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='bar',color = eval(parse(text = colr.equation)),
marker = list(
opacity = .4,
size = 10, color=~protein
)) %>%
layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>%
return()
}
runApp()
RatingsVsSugar <- function(data, search = '', xvar='calories', yvar = 'rating', color = 'protein') {
xmax <- max(data[,xvar]) * 1.5    # fix the range
ymax <- max(data[,yvar]) * 1.5    # >>  >>   >>
colr <- range(data[,"protein"])
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
colr.equation  <- paste0('~', color)
data <- data %>%
filter(grepl(search, mfr)) %>% mutate(averageRating = mean(rating))
plot_ly(data=data, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='bar',color = eval(parse(text = colr.equation)),
marker = list(
opacity = ~protein,
size = 10, color=~protein
)) %>%
layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>%
return()
}
runApp()
RatingsVsSugar <- function(data, search = '', xvar='calories', yvar = 'rating', color = 'protein') {
xmax <- max(data[,xvar]) * 1.5    # fix the range
ymax <- max(data[,yvar]) * 1.5    # >>  >>   >>
colr <- range(data[,"protein"])
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
colr.equation  <- paste0('~', color)
data <- data %>%
filter(grepl(search, mfr)) %>% mutate(averageRating = mean(rating))
plot_ly(data=data, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='bar',color = eval(parse(text = colr.equation)),
marker = list(
#opacity = .4,
size = 10, color=~protein
)) %>%
layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>%
return()
}
runApp()
runApp()
RatingsVsSugar <- function(data, search = '', xvar='calories', yvar = 'rating', color = 'protein') {
xmax <- max(data[,xvar]) * 1.5    # fix the range
ymax <- max(data[,yvar]) * 1.5    # >>  >>   >>
colr <- range(data[,"protein"])
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
colr.equation  <- paste0('~', color)
data <- data %>%
filter(grepl(search, mfr)) %>% mutate(averageRating = mean(rating))
plot_ly(data=data, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='bar',#color = eval(parse(text = colr.equation)),
marker = list(
opacity = color,
size = 10#, color=~protein
)) %>%
layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>%
return()
}
runApp()
RatingsVsSugar <- function(data, search = '', xvar='calories', yvar = 'rating', color = 'protein') {
xmax <- max(data[,xvar]) * 1.5    # fix the range
ymax <- max(data[,yvar]) * 1.5    # >>  >>   >>
colr <- range(data[,"protein"])
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
colr.equation  <- paste0('~', color)
data <- data %>%
filter(grepl(search, mfr)) %>% mutate(averageRating = mean(rating))
plot_ly(data=data, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='bar',#color = eval(parse(text = colr.equation)),
marker = list(
opacity = .4,
size = 10#, color=~protein
)) %>%
layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>%
return()
}
runApp()
RatingsVsSugar <- function(data, search = '', xvar='calories', yvar = 'rating', color = 'protein') {
xmax <- max(data[,xvar]) * 1.5    # fix the range
ymax <- max(data[,yvar]) * 1.5    # >>  >>   >>
colr <- range(data[,"protein"])
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
colr.equation  <- paste0('~', color)
data <- data %>%
filter(grepl(search, mfr)) %>% mutate(averageRating = mean(rating))
plot_ly(data=data, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='bar',#color = eval(parse(text = colr.equation)),
marker = list(
opacity = .5,
size = 10#, color=~protein
)) %>%
layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>%
return()
}
runApp()
RatingsVsSugar <- function(data, search = '', xvar='calories', yvar = 'rating', color = 'protein') {
xmax <- max(data[,xvar]) * 1.5    # fix the range
ymax <- max(data[,yvar]) * 1.5    # >>  >>   >>
colr <- range(data[,"protein"])
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
colr.equation  <- paste0('~', color)
data <- data %>%
filter(grepl(search, mfr)) %>% mutate(averageRating = mean(rating))
plot_ly(data=data, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='bar',#color = eval(parse(text = colr.equation)),
marker = list(
opacity = .3,
size = 10#, color=~protein
)) %>%
layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>%
return()
}
RatingsVsSugar <- function(data, search = '', xvar='calories', yvar = 'rating', color = 'protein') {
xmax <- max(data[,xvar]) * 1.5    # fix the range
ymax <- max(data[,yvar]) * 1.5    # >>  >>   >>
colr <- range(data[,"protein"])
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
colr.equation  <- paste0('~', color)
data <- data %>%
filter(grepl(search, mfr)) %>% mutate(averageRating = mean(rating))
plot_ly(data=data, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='bar',#color = eval(parse(text = colr.equation)),
marker = list(
opacity = .3,
size = 10#, color=~protein
)) %>%
layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>%
return()
}
runApp()
plot_ly(data=data, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='bar', marker = list(opacity = .5, size = 10 )) %>% layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>% return()
RatingsVsSugar <- function(data, search = '', xvar='calories', yvar = 'rating', color = 'protein') {
xmax <- max(data[,xvar]) * 1.5    # fix the range
ymax <- max(data[,yvar]) * 1.5    # >>  >>   >>
colr <- range(data[,"protein"])
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
colr.equation  <- paste0('~', color)
data <- data %>%
filter(grepl(search, mfr)) %>% mutate(averageRating = mean(rating))
plot_ly(data=data, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='bar', marker = list(opacity = .5, size = 10 )) %>% layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>% return()
}
RatingsVsSugar <- function(data, search = '', xvar='calories', yvar = 'rating', color = 'protein') {
xmax <- max(data[,xvar]) * 1.5    # fix the range
ymax <- max(data[,yvar]) * 1.5    # >>  >>   >>
colr <- range(data[,"protein"])
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
colr.equation  <- paste0('~', color)
data <- data %>%
filter(grepl(search, mfr)) %>% mutate(averageRating = mean(rating))
plot_ly(data=data, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='bar', marker = list(opacity = .5, size = 10 )) %>% layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>% return()
}
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
shiny::runApp()
cereal %>% View
cereal <- group_by(cereal,mfr) %>% mutate(correlation = cor(rating,calories), proteiToFat = protein / fat)
cereal %>% View
cereal[cereal$sugars <5, ]
cereal[cereal$sugars <5, ] %>% View
runApp()
runApp()
data <- read.csv(file = 'Ethnic_Distribution_of_Detention_Population_2004-2013.csv',header = TRUE)
setwd("C:/Users/Kidus/Desktop/INFO 201/Assignments/wa-ethnic-detention-2004-2013")
data <- read.csv(file = './data/Ethnic_Distribution_of_Detention_Population_2004-2013.csv',header = TRUE)
data %>% View
data.with.extra.Col <- read.csv(file = './data/added_column.csv' ,header = TRUE)
data.with.extra.Col %>% View
data <- read.csv(file = './data/Ethnic_Distribution_of_Detention_Population_2004-2013.csv',header = TRUE)
data.with.extra.Col <- read.csv(file = './data/added_column.csv' ,header = TRUE)
data %>% View
data.with.extra.Col %>% View
data.with.extra.Col %>% View
data %>% View
library(tidyr)
install.packages('tidyr')
