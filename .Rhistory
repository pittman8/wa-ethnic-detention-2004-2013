map <- plot_geo(mass.shootings, lat = ~lat, lon = ~lng, color = ~total.victims) %>%
add_markers(text = ~paste(paste("Victims:",total.victims),paste("Killed:", killed),paste("Injured:",injured), sep = "<br />"), hoverinfo = "text"
) %>% layout(title = 'Mass shootings in 2016, US cities', geo = g)
# interactive graph that contains information of the number of victims, number of shooting incidents and
# how many killed and injured by those incidents.
library(plotly)
g <- plot_ly(table, x = ~number.of.cases, y = ~total.victims, color = ~total.victims,
size = ~total.victims, text = ~paste("(","# of shootings",", ","# of victims",")"))
library(dplyr)
library(knitr)
library(plotly)
# Assignment 6
mass.shooting.data <- read.csv('data/shootings-2016.csv',header = TRUE)
number.of.shooting <- nrow(mass.shooting.data)
number.of.lives.lost <- sum(mass.shooting.data$killed)
number.of.injured <- sum(mass.shooting.data$injured)
# identify the city that is largely affected by mass shooting in 2016.
state.and.city.highest.killed <- filter(mass.shooting.data,killed == max(mass.shooting.data$killed))%>% select(city,state)
state.and.city.highest.injured <- filter(mass.shooting.data,injured== max(mass.shooting.data$injured)) %>% select(city, state)
date.for.the.highest.killed <- filter(mass.shooting.data, killed==max(mass.shooting.data$killed)) %>% select(date)
# Create a table that has general information on state level.
table <- group_by(mass.shooting.data,state) %>% summarise(total.killed = sum(killed), total.injured = sum(injured), total.victims = (total.injured + total.killed), number.of.cases = n())
state.with.highest.shooting.cases <- table[table$number.of.cases == max(table$number.of.cases),]
kable(table)
# change default color scale title
m <- list(colorbar = list(title = "Total Victims"))
# geo styling
g <- list(
scope = 'north america',
showland = TRUE,
landcolor = toRGB("grey83"),
subunitcolor = toRGB("blue"),
countrycolor = toRGB("white"),
showlakes = TRUE,
lakecolor = toRGB("white"),
showsubunits = TRUE,
showcountries = TRUE,
resolution = 50,
projection = list(
type = 'conic conformal',
rotation = list(lon = -100)
),
lonaxis = list(
showgrid = TRUE,
gridwidth = 0.5,
range = c(-140, -55),
dtick = 5
),
lataxis = list(
showgrid = TRUE,
gridwidth = 0.5,
range = c(20, 60),
dtick = 5
)
)
# separate the information by latitude and longtud.
mass.shootings <-  group_by(mass.shooting.data, lat, lng, killed,injured) %>% summarise(total.victims = sum(killed) + sum(injured))
map <- plot_geo(mass.shootings, lat = ~lat, lon = ~lng, color = ~total.victims) %>%
add_markers(text = ~paste(paste("Victims:",total.victims),paste("Killed:", killed),paste("Injured:",injured), sep = "<br />"), hoverinfo = "text"
) %>% layout(title = 'Mass shootings in 2016, US cities', geo = g)
mass.shooting.data[mass.shooting.data$city=='Oakland',]
oakland <- mass.shooting.data[mass.shooting.data$city=='Oakland',]
<<<<<<< HEAD
=======
library(dplyr)
library(knitr)
library(plotly)
# Assignment 6
mass.shooting.data <- read.csv('data/shootings-2016.csv',header = TRUE)
number.of.shooting <- nrow(mass.shooting.data)
number.of.lives.lost <- sum(mass.shooting.data$killed)
number.of.injured <- sum(mass.shooting.data$injured)
# identify the city that is largely affected by mass shooting in 2016.
state.and.city.highest.killed <- filter(mass.shooting.data,killed == max(mass.shooting.data$killed))%>% select(city,state)
state.and.city.highest.injured <- filter(mass.shooting.data,injured== max(mass.shooting.data$injured)) %>% select(city, state)
date.for.the.highest.killed <- filter(mass.shooting.data, killed==max(mass.shooting.data$killed)) %>% select(date)
# Create a table that has general information on state level.
table <- group_by(mass.shooting.data,state) %>% summarise(total.killed = sum(killed), total.injured = sum(injured), total.victims = (total.injured + total.killed), number.of.cases = n())
state.with.highest.shooting.cases <- table[table$number.of.cases == max(table$number.of.cases),]
oakland <- mass.shooting.data[mass.shooting.data$city=='Oakland',]
kable(table)
library(dplyr)
library(knitr)
library(plotly)
# Assignment 6
mass.shooting.data <- read.csv('data/shootings-2016.csv',header = TRUE)
number.of.shooting <- nrow(mass.shooting.data)
number.of.lives.lost <- sum(mass.shooting.data$killed)
number.of.injured <- sum(mass.shooting.data$injured)
# identify the city that is largely affected by mass shooting in 2016.
state.and.city.highest.killed <- filter(mass.shooting.data,killed == max(mass.shooting.data$killed))%>% select(city,state)
state.and.city.highest.injured <- filter(mass.shooting.data,injured== max(mass.shooting.data$injured)) %>% select(city, state)
date.for.the.highest.killed <- filter(mass.shooting.data, killed==max(mass.shooting.data$killed)) %>% select(date)
library(dplyr)
library(knitr)
library(plotly)
# Assignment 6
mass.shooting.data <- read.csv('data/shootings-2016.csv',header = TRUE)
number.of.shooting <- nrow(mass.shooting.data)
number.of.lives.lost <- sum(mass.shooting.data$killed)
number.of.injured <- sum(mass.shooting.data$injured)
# identify the city that is largely affected by mass shooting in 2016.
state.and.city.highest.killed <- filter(mass.shooting.data,killed == max(mass.shooting.data$killed))%>% select(city,state)
state.and.city.highest.injured <- filter(mass.shooting.data,injured== max(mass.shooting.data$injured)) %>% select(city, state)
date.for.the.highest.killed <- filter(mass.shooting.data, killed==max(mass.shooting.data$killed)) %>% select(date)
>>>>>>> Best fit line add
library(dplyr)
library(knitr)
library(plotly)
# Assignment 6
mass.shooting.data <- read.csv('data/shootings-2016.csv',header = TRUE)
number.of.shooting <- nrow(mass.shooting.data)
number.of.lives.lost <- sum(mass.shooting.data$killed)
number.of.injured <- sum(mass.shooting.data$injured)
# identify the city that is largely affected by mass shooting in 2016.
state.and.city.highest.killed <- filter(mass.shooting.data,killed == max(mass.shooting.data$killed))%>% select(city,state)
state.and.city.highest.injured <- filter(mass.shooting.data,injured== max(mass.shooting.data$injured)) %>% select(city, state)
date.for.the.highest.killed <- filter(mass.shooting.data, killed==max(mass.shooting.data$killed)) %>% select(date)
# Create a table that has general information on state level.
table <- group_by(mass.shooting.data,state) %>% summarise(total.killed = sum(killed), total.injured = sum(injured), total.victims = (total.injured + total.killed), number.of.cases = n())
state.with.highest.shooting.cases <- table[table$number.of.cases == max(table$number.of.cases),]
oakland <- mass.shooting.data[mass.shooting.data$city=='Oakland',]
kable(table)
<<<<<<< HEAD
library(dplyr)
library(knitr)
library(plotly)
# Assignment 6
mass.shooting.data <- read.csv('data/shootings-2016.csv',header = TRUE)
number.of.shooting <- nrow(mass.shooting.data)
number.of.lives.lost <- sum(mass.shooting.data$killed)
number.of.injured <- sum(mass.shooting.data$injured)
# identify the city that is largely affected by mass shooting in 2016.
state.and.city.highest.killed <- filter(mass.shooting.data,killed == max(mass.shooting.data$killed))%>% select(city,state)
state.and.city.highest.injured <- filter(mass.shooting.data,injured== max(mass.shooting.data$injured)) %>% select(city, state)
date.for.the.highest.killed <- filter(mass.shooting.data, killed==max(mass.shooting.data$killed)) %>% select(date)
library(dplyr)
library(knitr)
library(plotly)
# Assignment 6
mass.shooting.data <- read.csv('data/shootings-2016.csv',header = TRUE)
number.of.shooting <- nrow(mass.shooting.data)
number.of.lives.lost <- sum(mass.shooting.data$killed)
number.of.injured <- sum(mass.shooting.data$injured)
# identify the city that is largely affected by mass shooting in 2016.
state.and.city.highest.killed <- filter(mass.shooting.data,killed == max(mass.shooting.data$killed))%>% select(city,state)
state.and.city.highest.injured <- filter(mass.shooting.data,injured== max(mass.shooting.data$injured)) %>% select(city, state)
date.for.the.highest.killed <- filter(mass.shooting.data, killed==max(mass.shooting.data$killed)) %>% select(date)
library(dplyr)
library(knitr)
library(plotly)
# Assignment 6
mass.shooting.data <- read.csv('data/shootings-2016.csv',header = TRUE)
number.of.shooting <- nrow(mass.shooting.data)
number.of.lives.lost <- sum(mass.shooting.data$killed)
number.of.injured <- sum(mass.shooting.data$injured)
# identify the city that is largely affected by mass shooting in 2016.
state.and.city.highest.killed <- filter(mass.shooting.data,killed == max(mass.shooting.data$killed))%>% select(city,state)
state.and.city.highest.injured <- filter(mass.shooting.data,injured== max(mass.shooting.data$injured)) %>% select(city, state)
date.for.the.highest.killed <- filter(mass.shooting.data, killed==max(mass.shooting.data$killed)) %>% select(date)
# Create a table that has general information on state level.
table <- group_by(mass.shooting.data,state) %>% summarise(total.killed = sum(killed), total.injured = sum(injured), total.victims = (total.injured + total.killed), number.of.cases = n())
state.with.highest.shooting.cases <- table[table$number.of.cases == max(table$number.of.cases),]
oakland <- mass.shooting.data[mass.shooting.data$city=='Oakland',]
kable(table)
=======
>>>>>>> Best fit line add
# change default color scale title
m <- list(colorbar = list(title = "Total Victims"))
# geo styling
g <- list(
scope = 'north america',
showland = TRUE,
landcolor = toRGB("grey83"),
subunitcolor = toRGB("blue"),
countrycolor = toRGB("white"),
showlakes = TRUE,
lakecolor = toRGB("white"),
showsubunits = TRUE,
showcountries = TRUE,
resolution = 50,
projection = list(
type = 'conic conformal',
rotation = list(lon = -100)
),
lonaxis = list(
showgrid = TRUE,
gridwidth = 0.5,
range = c(-140, -55),
dtick = 5
),
lataxis = list(
showgrid = TRUE,
gridwidth = 0.5,
range = c(20, 60),
dtick = 5
)
)
# separate the information by latitude and longtud.
mass.shootings <-  group_by(mass.shooting.data, lat, lng, killed,injured) %>% summarise(total.victims = sum(killed) + sum(injured))
map <- plot_geo(mass.shootings, lat = ~lat, lon = ~lng, color = ~total.victims) %>%
add_markers(text = ~paste(paste("Victims:",total.victims),paste("Killed:", killed),paste("Injured:",injured), sep = "<br />"), hoverinfo = "text"
) %>% layout(title = 'Mass shootings in 2016, US cities', geo = g)
# interactive graph that contains information of the number of victims, number of shooting incidents and
# how many killed and injured by those incidents.
g <- plot_ly(table, x = ~number.of.cases, y = ~total.victims, color = ~total.victims,
size = ~total.victims, text = ~paste("(","# of shootings",", ","# of victims",")"))
# interactive graph that contains information of the number of victims, number of shooting incidents and
# how many killed and injured by those incidents.
g <- plot_ly(table, x = ~number.of.cases, y = ~total.victims, color = ~total.victims,
size = ~total.victims, text = ~paste("(","# of shootings",", ","# of victims",")"))
# change default color scale title
m <- list(colorbar = list(title = "Total Victims"))
# geo styling
g <- list(
scope = 'north america',
showland = TRUE,
landcolor = toRGB("grey83"),
subunitcolor = toRGB("blue"),
countrycolor = toRGB("white"),
showlakes = TRUE,
lakecolor = toRGB("white"),
showsubunits = TRUE,
showcountries = TRUE,
resolution = 50,
projection = list(
type = 'conic conformal',
rotation = list(lon = -100)
),
lonaxis = list(
showgrid = TRUE,
gridwidth = 0.5,
range = c(-140, -55),
dtick = 5
),
lataxis = list(
showgrid = TRUE,
gridwidth = 0.5,
range = c(20, 60),
dtick = 5
)
)
# separate the information by latitude and longtud.
mass.shootings <-  group_by(mass.shooting.data, lat, lng, killed,injured) %>% summarise(total.victims = sum(killed) + sum(injured))
map <- plot_geo(mass.shootings, lat = ~lat, lon = ~lng, color = ~total.victims) %>%
add_markers(text = ~paste(paste("Victims:",total.victims),paste("Killed:", killed),paste("Injured:",injured), sep = "<br />"), hoverinfo = "text"
) %>% layout(title = 'Mass shootings in 2016, US cities', geo = g)
# Create a table that has general information on state level.
table <- group_by(mass.shooting.data,state) %>% summarise(total.killed = sum(killed), total.injured = sum(injured), total.victims = (total.injured + total.killed), number.of.cases = n())
state.with.highest.shooting.cases <- table[table$number.of.cases == max(table$number.of.cases),]
oakland <- mass.shooting.data[mass.shooting.data$city=='Oakland',]
kable(table)
# Create a table that has general information on state level.
table <- group_by(mass.shooting.data,state) %>% summarise(total.killed = sum(killed), total.injured = sum(injured), total.victims = (total.injured + total.killed), shooting cases = n())
# Create a table that has general information on state level.
table <- group_by(mass.shooting.data,state) %>% summarise(total.killed = sum(killed), total.injured = sum(injured), total.victims = (total.injured + total.killed), shooting.cases = n())
state.with.highest.shooting.cases <- table[table$number.of.cases == max(table$number.of.cases),]
oakland <- mass.shooting.data[mass.shooting.data$city=='Oakland',]
kable(table)
# Create a table that has general information on state level.
table <- group_by(mass.shooting.data,state) %>% summarise(total.killed = sum(killed), total.injured = sum(injured), total.victims = (total.injured + total.killed), number.of.cases = n())
state.with.highest.shooting.cases <- table[table$number.of.cases == max(table$number.of.cases),]
oakland <- mass.shooting.data[mass.shooting.data$city=='Oakland',]
kable(table)
```{r, message=FALSE, echo=FALSE, warning=TRUE}
<<<<<<< HEAD
library(dplyr)
library(knitr)
library(plotly)
# Assignment 6
mass.shooting.data <- read.csv('data/shootings-2016.csv',header = TRUE)
number.of.shooting <- nrow(mass.shooting.data)
number.of.lives.lost <- sum(mass.shooting.data$killed)
number.of.injured <- sum(mass.shooting.data$injured)
# identify the city that is largely affected by mass shooting in 2016.
state.and.city.highest.killed <- filter(mass.shooting.data,killed == max(mass.shooting.data$killed))%>% select(city,state)
state.and.city.highest.injured <- filter(mass.shooting.data,injured== max(mass.shooting.data$injured)) %>% select(city, state)
date.for.the.highest.killed <- filter(mass.shooting.data, killed==max(mass.shooting.data$killed)) %>% select(date)
```
## Summary of 2016's mass shootings:
------------------------------------
There were **`r number.of.shooting`** shooting cases in 2016. If we break it down, the number of lives that were lost during these incidents is **`r number.of.lives.lost`** and the number of people who were injured is **`r number.of.injured`**. The city that is mostly affected by mass shooting in general(lives lost and people injured) is **`r state.and.city.highest.killed`**. In **`r date.for.the.highest.killed`**, **`r state.and.city.highest.killed$city`** experienced the worst shooting in the country. **`r max(mass.shooting.data$killed)`** people were killed & **`r max(mass.shooting.data$injured)`** injured. This cases is related to the 2016's [Orlando Night Club Attack](http://www.bbc.com/news/world-us-canada-36511778).
## Summary Table
----------------
This table shows the number of shooting cases that happened in each state including the number of people injured, killed and the total victims of those shootings.
```{r,message=FALSE, echo=FALSE, warning=TRUE}
# Create a table that has general information on state level.
table <- group_by(mass.shooting.data,state) %>% summarise(total.killed = sum(killed), total.injured = sum(injured), total.victims = (total.injured + total.killed), number.of.cases = n())
state.with.highest.shooting.cases <- table[table$number.of.cases == max(table$number.of.cases),]
oakland <- mass.shooting.data[mass.shooting.data$city=='Oakland',]
kable(table)
```
In 2016, **`r state.with.highest.shooting.cases$state`** had **`r state.with.highest.shooting.cases$number.of.cases`** shooting cases, which is the highest shooting cases recorded in the country. In total, the number of victims were **`r state.with.highest.shooting.cases$total.victims`**, **`r state.with.highest.shooting.cases$total.killed`** killed and **`r state.with.highest.shooting.cases$total.injured`** injured. One example is [Downtown Oakland shooting wounds 8; two men arrested
](http://www.eastbaytimes.com/2016/11/05/oakland-several-wounded-in-downtown-shooting/). This mass shootting happened on **`r oakland$date[1]`**. The incident left **`r max(oakland$injured)`** people injured. Fortunaltlly, no one was killed.
```{r, message=FALSE, echo=FALSE, warning=TRUE}
# change default color scale title
m <- list(colorbar = list(title = "Total Victims"))
# geo styling
g <- list(
scope = 'north america',
showland = TRUE,
landcolor = toRGB("grey83"),
subunitcolor = toRGB("blue"),
countrycolor = toRGB("white"),
showlakes = TRUE,
lakecolor = toRGB("white"),
showsubunits = TRUE,
showcountries = TRUE,
resolution = 50,
projection = list(
type = 'conic conformal',
rotation = list(lon = -100)
),
lonaxis = list(
showgrid = TRUE,
gridwidth = 0.5,
range = c(-140, -55),
dtick = 5
),
lataxis = list(
showgrid = TRUE,
gridwidth = 0.5,
range = c(20, 60),
dtick = 5
)
)
# separate the information by latitude and longtud.
mass.shootings <-  group_by(mass.shooting.data, lat, lng, killed,injured) %>% summarise(total.victims = sum(killed) + sum(injured))
map <- plot_geo(mass.shootings, lat = ~lat, lon = ~lng, color = ~total.victims) %>%
add_markers(text = ~paste(paste("Victims:",total.victims),paste("Killed:", killed),paste("Injured:",injured), sep = "<br />"), hoverinfo = "text"
) %>% layout(title = 'Mass shootings in 2016, US cities', geo = g)
```
### Map of 2016's shooting in U.S
---------------------------------
`r map`
This map shows the shooting incidents that happened through out the United States in 2016. As indicated, the **majority** of the mass shootings occured in the **southeast** part of the country. This could be due to the strengh of laws and regulations of **firearms** in those states and as well as other factors.
```{r, message=FALSE, echo=FALSE, warning=TRUE}
# interactive graph that contains information of the number of victims, number of shooting incidents and
# how many killed and injured by those incidents.
g <- plot_ly(table, x = ~number.of.cases, y = ~total.victims, color = ~total.victims,
size = ~total.victims, text = ~paste("(","# of shootings",", ","# of victims",")"))
```
### Interactive Graph
---------------------
This graph shows the relationship between **number of victims** and the **number of shooting cases** that happened in **2016**. It indicates that as the number of shooting cases **increase** the number of victims also increase. Even though, there are a few places with a few number of shooting cases and a higher number of victims involved.
`r g`
# change default color scale title
m <- list(colorbar = list(title = "Total Victims"))
# geo styling
g <- list(
scope = 'north america',
showland = TRUE,
landcolor = toRGB("grey83"),
subunitcolor = toRGB("blue"),
countrycolor = toRGB("white"),
showlakes = TRUE,
lakecolor = toRGB("white"),
showsubunits = TRUE,
showcountries = TRUE,
resolution = 50,
projection = list(
type = 'conic conformal',
rotation = list(lon = -100)
),
lonaxis = list(
showgrid = TRUE,
gridwidth = 0.5,
range = c(-140, -55),
dtick = 5
),
lataxis = list(
showgrid = TRUE,
gridwidth = 0.5,
range = c(20, 60),
dtick = 5
)
)
# separate the information by latitude and longtud.
mass.shootings <-  group_by(mass.shooting.data, lat, lng, killed,injured) %>% summarise(total.victims = sum(killed) + sum(injured))
map <- plot_geo(mass.shootings, lat = ~lat, lon = ~lng, color = ~total.victims) %>%
add_markers(text = ~paste(paste("Victims:",total.victims),paste("Killed:", killed),paste("Injured:",injured), sep = "<br />"), hoverinfo = "text"
) %>% layout(title = 'Mass shootings in 2016, US cities', geo = g)
=======
>>>>>>> Best fit line add
library(dplyr)
library(knitr)
library(plotly)
# Assignment 6
mass.shooting.data <- read.csv('data/shootings-2016.csv',header = TRUE)
number.of.shooting <- nrow(mass.shooting.data)
number.of.lives.lost <- sum(mass.shooting.data$killed)
number.of.injured <- sum(mass.shooting.data$injured)
# identify the city that is largely affected by mass shooting in 2016.
state.and.city.highest.killed <- filter(mass.shooting.data,killed == max(mass.shooting.data$killed))%>% select(city,state)
state.and.city.highest.injured <- filter(mass.shooting.data,injured== max(mass.shooting.data$injured)) %>% select(city, state)
date.for.the.highest.killed <- filter(mass.shooting.data, killed==max(mass.shooting.data$killed)) %>% select(date)
<<<<<<< HEAD
=======
```
## Summary of 2016's mass shootings:
------------------------------------
There were **`r number.of.shooting`** shooting cases in 2016. If we break it down, the number of lives that were lost during these incidents is **`r number.of.lives.lost`** and the number of people who were injured is **`r number.of.injured`**. The city that is mostly affected by mass shooting in general(lives lost and people injured) is **`r state.and.city.highest.killed`**. In **`r date.for.the.highest.killed`**, **`r state.and.city.highest.killed$city`** experienced the worst shooting in the country. **`r max(mass.shooting.data$killed)`** people were killed & **`r max(mass.shooting.data$injured)`** injured. This cases is related to the 2016's [Orlando Night Club Attack](http://www.bbc.com/news/world-us-canada-36511778).
## Summary Table
----------------
This table shows the number of shooting cases that happened in each state including the number of people injured, killed and the total victims of those shootings.
```{r,message=FALSE, echo=FALSE, warning=TRUE}
>>>>>>> Best fit line add
# Create a table that has general information on state level.
table <- group_by(mass.shooting.data,state) %>% summarise(total.killed = sum(killed), total.injured = sum(injured), total.victims = (total.injured + total.killed), number.of.cases = n())
state.with.highest.shooting.cases <- table[table$number.of.cases == max(table$number.of.cases),]
oakland <- mass.shooting.data[mass.shooting.data$city=='Oakland',]
kable(table)
<<<<<<< HEAD
=======
```
In 2016, **`r state.with.highest.shooting.cases$state`** had **`r state.with.highest.shooting.cases$number.of.cases`** shooting cases, which is the highest shooting cases recorded in the country. In total, the number of victims were **`r state.with.highest.shooting.cases$total.victims`**, **`r state.with.highest.shooting.cases$total.killed`** killed and **`r state.with.highest.shooting.cases$total.injured`** injured. One example is [Downtown Oakland shooting wounds 8; two men arrested
](http://www.eastbaytimes.com/2016/11/05/oakland-several-wounded-in-downtown-shooting/). This mass shootting happened on **`r oakland$date[1]`**. The incident left **`r max(oakland$injured)`** people injured. Fortunaltlly, no one was killed.
```{r, message=FALSE, echo=FALSE, warning=TRUE}
# change default color scale title
m <- list(colorbar = list(title = "Total Victims"))
# geo styling
g <- list(
scope = 'north america',
showland = TRUE,
landcolor = toRGB("grey83"),
subunitcolor = toRGB("blue"),
countrycolor = toRGB("white"),
showlakes = TRUE,
lakecolor = toRGB("white"),
showsubunits = TRUE,
showcountries = TRUE,
resolution = 50,
projection = list(
type = 'conic conformal',
rotation = list(lon = -100)
),
lonaxis = list(
showgrid = TRUE,
gridwidth = 0.5,
range = c(-140, -55),
dtick = 5
),
lataxis = list(
showgrid = TRUE,
gridwidth = 0.5,
range = c(20, 60),
dtick = 5
)
)
# separate the information by latitude and longtud.
mass.shootings <-  group_by(mass.shooting.data, lat, lng, killed,injured) %>% summarise(total.victims = sum(killed) + sum(injured))
map <- plot_geo(mass.shootings, lat = ~lat, lon = ~lng, color = ~total.victims) %>%
add_markers(text = ~paste(paste("Victims:",total.victims),paste("Killed:", killed),paste("Injured:",injured), sep = "<br />"), hoverinfo = "text"
) %>% layout(title = 'Mass shootings in 2016, US cities', geo = g)
```
### Map of 2016's shooting in U.S
---------------------------------
`r map`
This map shows the shooting incidents that happened through out the United States in 2016. As indicated, the **majority** of the mass shootings occured in the **southeast** part of the country. This could be due to the strengh of laws and regulations of **firearms** in those states and as well as other factors.
```{r, message=FALSE, echo=FALSE, warning=TRUE}
>>>>>>> Best fit line add
# interactive graph that contains information of the number of victims, number of shooting incidents and
# how many killed and injured by those incidents.
g <- plot_ly(table, x = ~number.of.cases, y = ~total.victims, color = ~total.victims,
size = ~total.victims, text = ~paste("(","# of shootings",", ","# of victims",")"))
<<<<<<< HEAD
setwd("C:/Users/Kidus/Desktop/INFO 201/Assignments/wa-ethnic-detention-2004-2013")
shiny::runApp()
setwd("C:/Users/Kidus/Desktop/INFO 201/Assignments/wa-ethnic-detention-2004-2013")
runApp()
data <- read.csv(file = './data/Ethnic_Distribution_of_Detention_Population_2004-2013.csv',header = TRUE)
data %>% View()
long.data <- gather(data,Black,Year)
library(tidyr)
library(dplyr)
library(tidyr)
library(plotly)
=======
```
### Interactive Graph
---------------------
This graph shows the relationship between **number of victims** and the **number of shooting cases** that happened in **2016**. It indicates that as the number of shooting cases **increase** the number of victims also increase. Even though, there are a few places with a few number of shooting cases and a higher number of victims involved.
`r g`
# change default color scale title
m <- list(colorbar = list(title = "Total Victims"))
# geo styling
g <- list(
scope = 'north america',
showland = TRUE,
landcolor = toRGB("grey83"),
subunitcolor = toRGB("blue"),
countrycolor = toRGB("white"),
showlakes = TRUE,
lakecolor = toRGB("white"),
showsubunits = TRUE,
showcountries = TRUE,
resolution = 50,
projection = list(
type = 'conic conformal',
rotation = list(lon = -100)
),
lonaxis = list(
showgrid = TRUE,
gridwidth = 0.5,
range = c(-140, -55),
dtick = 5
),
lataxis = list(
showgrid = TRUE,
gridwidth = 0.5,
range = c(20, 60),
dtick = 5
)
)
# separate the information by latitude and longtud.
mass.shootings <-  group_by(mass.shooting.data, lat, lng, killed,injured) %>% summarise(total.victims = sum(killed) + sum(injured))
map <- plot_geo(mass.shootings, lat = ~lat, lon = ~lng, color = ~total.victims) %>%
add_markers(text = ~paste(paste("Victims:",total.victims),paste("Killed:", killed),paste("Injured:",injured), sep = "<br />"), hoverinfo = "text"
) %>% layout(title = 'Mass shootings in 2016, US cities', geo = g)
library(dplyr)
library(knitr)
library(plotly)
# Assignment 6
mass.shooting.data <- read.csv('data/shootings-2016.csv',header = TRUE)
number.of.shooting <- nrow(mass.shooting.data)
number.of.lives.lost <- sum(mass.shooting.data$killed)
number.of.injured <- sum(mass.shooting.data$injured)
# identify the city that is largely affected by mass shooting in 2016.
state.and.city.highest.killed <- filter(mass.shooting.data,killed == max(mass.shooting.data$killed))%>% select(city,state)
state.and.city.highest.injured <- filter(mass.shooting.data,injured== max(mass.shooting.data$injured)) %>% select(city, state)
date.for.the.highest.killed <- filter(mass.shooting.data, killed==max(mass.shooting.data$killed)) %>% select(date)
# Create a table that has general information on state level.
table <- group_by(mass.shooting.data,state) %>% summarise(total.killed = sum(killed), total.injured = sum(injured), total.victims = (total.injured + total.killed), number.of.cases = n())
state.with.highest.shooting.cases <- table[table$number.of.cases == max(table$number.of.cases),]
oakland <- mass.shooting.data[mass.shooting.data$city=='Oakland',]
kable(table)
# interactive graph that contains information of the number of victims, number of shooting incidents and
# how many killed and injured by those incidents.
g <- plot_ly(table, x = ~number.of.cases, y = ~total.victims, color = ~total.victims,
size = ~total.victims, text = ~paste("(","# of shootings",", ","# of victims",")"))
setwd("C:/Users/Kidus/Desktop/INFO 201/Assignments/wa-ethnic-detention-2004-2013")
shiny::runApp()
setwd("C:/Users/Kidus/Desktop/INFO 201/Assignments/wa-ethnic-detention-2004-2013")
runApp()
data <- read.csv(file = './data/Ethnic_Distribution_of_Detention_Population_2004-2013.csv',header = TRUE)
data %>% View()
long.data <- gather(data,Black,Year)
library(tidyr)
library(dplyr)
library(tidyr)
library(plotly)
>>>>>>> Best fit line add
long.data <- gather(data,Black,Year)
data.with.extra.Col <- read.csv(file = './data/added_column.csv' ,header = TRUE)
data.with.extra.Col %>% View
data %>% View
runApp('C:/Users/Kidus/Desktop/INFO 201/Assignments/a8-building-apps-Kidusyohanes')
data.with.extra.Col %>% View
data %>% View
left_join(data,data.with.extra.Col)
full.data <- left_join(data,data.with.extra.Col)
full.data <- left_join(data,data.with.extra.Col, by= 'Year')
full.data %>% View
group_by(full.data,Year) %>% mutate(pop.per.arrested = (Total /  Total.Num.People.in.WA)*100))
group_by(full.data,Year) %>% mutate(pop.per.arrested = (Total /  Total.Num.People.in.WA)*100)
a <- group_by(full.data,Year) %>% mutate(pop.per.arrested = (Total /  Total.Num.People.in.WA)*100)
a %>% View
full.data$Year <- gsub('%','',full.data$Year)
full.data$Year <- gsub('#','',full.data$Year)
filtered.data <- filter(full.data, Year %in% c('#2013', 'Alberto')
afds
full.data %>% View
total.num.data <- distinct(full.data,full.data$Total.Num.People.in.WA)
total.num.data <- distinct(full.data,full.data$Total.Num.People.in.WA, na.rm=TRUE)
total.num.data <- distinct(full.data,Total.Num.People.in.WA, na.rm=TRUE)
total.num.data %>% View
total.num.data <- distinct(full.data,Total.Num.People.in.WA)
total.num.data %>% view
total.num.data %>% View
full.data %>% view
full.data %>% View
total.num.data <- distinct(full.data,Total.Num.People.in.WA,Total, White, Black,Year, Native.American)
total.num.data %>% View
total.num.data <- distinct(full.data,Total.Num.People.in.WA)
total.num.data %>% View
full.data %>% View()
full.data <- left_join(data,data.with.extra.Col, by= 'Year')
full.data %>% View
filter(full.data, Year %in% c('#2004','#2005','#2006', '#2007','#2008','#2009','#2010','#2011','#20012', '#2013'))
filter(full.data, Year %in% c('#2004','#2005','#2006', '#2007','#2008','#2009','#2010','#2011','#20012', '#2013')) %>% View
filter(full.data, Year %in% c('#2004','#2005','#2006', '#2007','#2008')) %>% View
filter(full.data, Year %in% c('#2004','#2005','#2006', '#2007','#2008') %>% View
jk
library(dplyr)
filter(full.data,Year %in% c('#2013') )
filter(full.data,Year %in% c('#2013') ) %>% View
group_by(full.data, Year)
group_by(full.data, Year) %>% View
full.data$Year <- gsub('%','',full.data$Year)
full.data$Year <- gsub('#','',full.data$Year)
full.data <- left_join(data,data.with.extra.Col, by= 'Year')
full.data$Year <- gsub('%','',full.data$Year)
filter(full.data, Year %in% c('2004', '2005'))
filter(full.data, Year %in% c('2004', '2005')) %>% View
full.data %>% View
filter(full.data, Year %in% c('2004', '2005' ,'2006', '2007', '2008', '2009', '2010' ,'2011', '2012','2013')) %>% View
filter(full.data, Year %in% c('#2004', '#2005' ,'#2006', '#2007', '#2008', '#2009', '#2010' ,'#2011', '#2012','#2013')) %>% View
full.data <- left_join(data,data.with.extra.Col, by= 'Year')
num.of.arrested <- filter(full.data, Year %in% c('#2004', '#2005' ,'#2006', '#2007', '#2008', '#2009', '#2010' ,'#2011', '#2012','#2013'))
num.of.arrested %>% View
percentage <- filter(full.data, Year %in% c('2004', '2005' ,'2006', '2007', '2008', '2009', '2010' ,'2011', '2012','2013'))
percentage %>% View
full.data$Year <- gsub('%','',full.data$Year)
percentage <- filter(full.data, Year %in% c('2004', '2005' ,'2006', '2007', '2008', '2009', '2010' ,'2011', '2012','2013'))
percentage %>% View
full.data %>% View
num.of.arrested <- filter(full.data, Year %in% c('# 2004', '# 2005' ,'# 2006', '# 2007', '# 2008', '# 2009', '# 2010' ,'# 2011', '# 2012','# 2013'))
num.of.arrested %>% View
percentage %>% View
percentage <- filter(full.data, Year %in% c('2004', '2005' ,'2006', '2007', '2008', '2009', '2010' ,'2011', '2012','2013')) %>% Total.Num.of.People.in.WA =NULL
percentage <- filter(full.data, Year %in% c('2004', '2005' ,'2006', '2007', '2008', '2009', '2010' ,'2011', '2012','2013')) %>% Total.Num.of.People.in.WA <- NULL
percentage$Total.Num.People.in.WA <- NULL
percentage
percentage %>% view
percentage %>% View
WA.detention.data <- read.csv('./data/Ethnic_Distribution_of_Detention_Population_2004-2013.csv', check.names = FALSE)
WA.detention.data
WA.detention.data %>% View
percentage %>% View
data.with.extra.Col <- read.csv(file = './data/added_column.csv' ,header = TRUE)
data.with.extra.Col %>% View
data <- read.csv(file = './data/Ethnic_Distribution_of_Detention_Population_2004-2013.csv',header = TRUE)
data %>% View
percentage <- filter(full.data, Year %in% c('2004', '2005' ,'2006', '2007', '2008', '2009', '2010' ,'2011', '2012','2013'))
num.of.arrested <- filter(full.data, Year %in% c('# 2004', '# 2005' ,'# 2006', '# 2007', '# 2008', '# 2009', '# 2010' ,'# 2011', '# 2012','# 2013'))
percentage %>% View
full.data %>% View
full.data %>% gather(race,number,White:Other.Unknown)
full.data %>% gather(race,number,White:Other.Unknown) %>% View
full.data <- left_join(data,data.with.extra.Col, by= 'Year')
full.data %>% View
percentage <- filter(full.data, Year %in% c('2004', '2005' ,'2006', '2007', '2008', '2009', '2010' ,'2011', '2012','2013'))
num.of.arrested <- filter(full.data, Year %in% c('# 2004', '# 2005' ,'# 2006', '# 2007', '# 2008', '# 2009', '# 2010' ,'# 2011', '# 2012','# 2013'))
percentage$Total.Num.People.in.WA <- NULL
percentage %>% gather(race,per,White:Other.Unknown)
percentage %>% gather(race,per,White:Other.Unknown)
percentage %>% View
full.data %>% gather(race,number,White:Other.Unknown)
full.data <- left_join(data,data.with.extra.Col, by= 'Year')
percentage <- filter(full.data, Year %in% c('2004', '2005' ,'2006', '2007', '2008', '2009', '2010' ,'2011', '2012','2013'))
num.of.arrested <- filter(full.data, Year %in% c('# 2004', '# 2005' ,'# 2006', '# 2007', '# 2008', '# 2009', '# 2010' ,'# 2011', '# 2012','# 2013'))
percentage$Total.Num.People.in.WA <- NULL
percentage %>% gather(race,per,White:Other.Unknown)
# A visualization of the changes in the number of prisoners over time
# This could indicate the economical, politial and social chages that
# happened during the past 9 years.
library(dplyr)
library(tidyr)
library(plotly)
data <- read.csv(file = './data/Ethnic_Distribution_of_Detention_Population_2004-2013.csv',header = TRUE)
data.with.extra.Col <- read.csv(file = './data/added_column.csv' ,header = TRUE)
full.data <- left_join(data,data.with.extra.Col, by= 'Year')
full.data$Year <- gsub('%','',full.data$Year)
#full.data$Year <- gsub('#','',full.data$Year)
#full.data %>% gather(race,number,White:Other.Unknown)
total.num.data <- distinct(full.data,Total.Num.People.in.WA)
#a <- group_by(full.data,Year) %>% mutate(pop.per.arrested = (Total /  Total.Num.People.in.WA)*100)
changeOverTime <- function(data) {
}
percentage <- filter(full.data, Year %in% c('2004', '2005' ,'2006', '2007', '2008', '2009', '2010' ,'2011', '2012','2013'))
num.of.arrested <- filter(full.data, Year %in% c('# 2004', '# 2005' ,'# 2006', '# 2007', '# 2008', '# 2009', '# 2010' ,'# 2011', '# 2012','# 2013'))
percentage$Total.Num.People.in.WA <- NULL
percentage %>% gather(race,per,White:Other.Unknown)
percentage %>% View
percentage %>% gather(race,per,White:Other.Unknown)
percentage %>% View
percentage %>% gather(race,per,White:Other.Unknown)
percentage %>% gather(race,per,White:Other.Unknown) %>% View
num.of.arrested %>% gather(race,num,White:Other.Unknown) %>% View
percentage %>% gather(race,per,White:Other.Unknown) %>% View
percentage %>% View
percentage <- percentage %>% gather(race,per,White:Other.Unknown) %>% View
percentage %>% View
percentage %>% View
percentage
percentage %>% gather(race,per,White:Other.Unknown)
percentage <- filter(full.data, Year %in% c('2004', '2005' ,'2006', '2007', '2008', '2009', '2010' ,'2011', '2012','2013'))
percentage$Total.Num.People.in.WA <- NULL
long.percentage <- percentage %>% gather(race,per,White:Other.Unknown)
long.percentage %>% View
long.percentage$Total.per
`colnames(long.percentage)
gsd
sd s
d
stop()
dssfvvf
a ffafd
<<<<<<< HEAD
=======
p <- plot_geo(data,lat=data.lat,lon=data.lng) %>% add_markers(text="hi",color=data$killed,symbol = I("square"),size=I(8),hoverinfo = "text") %>% colorbar(title="hi") %>%layout(title="hi",geo=g)
# df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')
#
# # geo styling
# g <- list(
#   scope = 'usa',
#   projection = list(type = 'albers usa'),
#   showland = TRUE,
#   landcolor = toRGB("gray95"),
#   subunitcolor = toRGB("gray85"),
#   countrycolor = toRGB("gray85"),
#   countrywidth = 0.5,
#   subunitwidth = 0.5
# )
#
# p <- plot_geo(df, lat = ~lat, lon = ~long) %>%
#   add_markers(
#     text = ~paste(airport, city, state, paste("Arrivals:", cnt), sep = "<br />"),
#     color = ~cnt, symbol = I("square"), size = I(8), hoverinfo = "text"
#   ) %>%
#   colorbar(title = "Incoming flights<br />February 2011") %>%
#   layout(
#     title = 'Most trafficked US airports<br />(Hover for airport)', geo = g
#   )
p
getwd()
# setwd("~/documents/uw/2nd/INFO 201/a6-mapping-shootings-wjbarng/")
data <- read.csv("data/shootings-2016.csv", stringsAsFactors = FALSE)
library(dplyr)
library(knitr)
library(plotly)
count <- nrow(data)
lives.lost <- summarise(data,sum = sum(killed))
most.affected.cities <- mutate(data, affected = killed + injured) %>% select(city, affected) %>% group_by(city) %>% summarise(sum = sum(affected)) %>% filter(sum == max(sum))
most.killed.date <- filter(data, killed == max(killed)) %>% select(date)
summary <- select(data, state, injured, killed) %>% mutate(total = killed + injured) %>% group_by(state) %>%  summarise(injured = sum(injured),killed = sum(killed), total = sum(total), occurances = n()) %>%arrange(desc(total))
kable(summary)
incident <- filter(data,killed == 0) %>% filter(injured == max(injured))
# data.lng <- select(data,lng)
# data.lat <- select(data,lat)
#
g <- list(scope='usa',projection = list(type = 'albers usa'),showland = TRUE, landcolor = toRGB("black"), subunitcolor = toRGB("gray85"), countrycolor = toRGB("gray85"), countrywidth = 0.5, subunitwidth = 0.5)
p <- plot_geo(data,lat=data.lat,lon=data.lng) %>% add_markers(text="hi",color=data$killed,symbol = I("square"),size=I(8),hoverinfo = "text") %>% colorbar(title="hi") %>%layout(title="hi",geo=g)
# df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')
#
# # geo styling
# g <- list(
#   scope = 'usa',
#   projection = list(type = 'albers usa'),
#   showland = TRUE,
#   landcolor = toRGB("gray95"),
#   subunitcolor = toRGB("gray85"),
#   countrycolor = toRGB("gray85"),
#   countrywidth = 0.5,
#   subunitwidth = 0.5
# )
#
# p <- plot_geo(df, lat = ~lat, lon = ~long) %>%
#   add_markers(
#     text = ~paste(airport, city, state, paste("Arrivals:", cnt), sep = "<br />"),
#     color = ~cnt, symbol = I("square"), size = I(8), hoverinfo = "text"
#   ) %>%
#   colorbar(title = "Incoming flights<br />February 2011") %>%
#   layout(
#     title = 'Most trafficked US airports<br />(Hover for airport)', geo = g
#   )
data.lng <- select(data,lng)
data.lat <- select(data,lat)
#
g <- list(scope='usa',projection = list(type = 'albers usa'),showland = TRUE, landcolor = toRGB("black"), subunitcolor = toRGB("gray85"), countrycolor = toRGB("gray85"), countrywidth = 0.5, subunitwidth = 0.5)
p <- plot_geo(data,lat=data.lat,lon=data.lng) %>% add_markers(text="hi",color=data$killed,symbol = I("square"),size=I(8),hoverinfo = "text") %>% colorbar(title="hi") %>%layout(title="hi",geo=g)
# df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')
#
# # geo styling
# g <- list(
#   scope = 'usa',
#   projection = list(type = 'albers usa'),
#   showland = TRUE,
#   landcolor = toRGB("gray95"),
#   subunitcolor = toRGB("gray85"),
#   countrycolor = toRGB("gray85"),
#   countrywidth = 0.5,
#   subunitwidth = 0.5
# )
#
# p <- plot_geo(df, lat = ~lat, lon = ~long) %>%
#   add_markers(
#     text = ~paste(airport, city, state, paste("Arrivals:", cnt), sep = "<br />"),
#     color = ~cnt, symbol = I("square"), size = I(8), hoverinfo = "text"
#   ) %>%
#   colorbar(title = "Incoming flights<br />February 2011") %>%
#   layout(
#     title = 'Most trafficked US airports<br />(Hover for airport)', geo = g
#   )
p
getwd()
# setwd("~/documents/uw/2nd/INFO 201/a6-mapping-shootings-wjbarng/")
data <- read.csv("data/shootings-2016.csv", stringsAsFactors = FALSE)
library(dplyr)
library(knitr)
library(plotly)
count <- nrow(data)
lives.lost <- summarise(data,sum = sum(killed))
most.affected.cities <- mutate(data, affected = killed + injured) %>% select(city, affected) %>% group_by(city) %>% summarise(sum = sum(affected)) %>% filter(sum == max(sum))
most.killed.date <- filter(data, killed == max(killed)) %>% select(date)
summary <- select(data, state, injured, killed) %>% mutate(total = killed + injured) %>% group_by(state) %>%  summarise(injured = sum(injured),killed = sum(killed), total = sum(total), occurances = n()) %>%arrange(desc(total))
kable(summary)
incident <- filter(data,killed == 0) %>% filter(injured == max(injured))
data.lng <- select(data,lng)
data.lat <- select(data,lat)
#
g <- list(scope='usa',projection = list(type = 'albers usa'),showland = TRUE, landcolor = toRGB("black"), subunitcolor = toRGB("gray85"), countrycolor = toRGB("gray85"), countrywidth = 0.5, subunitwidth = 0.5)
p <- plot_geo(data,lat=data.lat,lon=data.lng) %>% add_markers(text="hi",color=data$killed,symbol = I("square"),size=I(8),hoverinfo = "text") %>% colorbar(title="hi") %>%layout(title="hi",geo=g)
# df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')
#
# # geo styling
# g <- list(
#   scope = 'usa',
#   projection = list(type = 'albers usa'),
#   showland = TRUE,
#   landcolor = toRGB("gray95"),
#   subunitcolor = toRGB("gray85"),
#   countrycolor = toRGB("gray85"),
#   countrywidth = 0.5,
#   subunitwidth = 0.5
# )
#
# p <- plot_geo(df, lat = ~lat, lon = ~long) %>%
#   add_markers(
#     text = ~paste(airport, city, state, paste("Arrivals:", cnt), sep = "<br />"),
#     color = ~cnt, symbol = I("square"), size = I(8), hoverinfo = "text"
#   ) %>%
#   colorbar(title = "Incoming flights<br />February 2011") %>%
#   layout(
#     title = 'Most trafficked US airports<br />(Hover for airport)', geo = g
#   )
p
data.lat <- select(data,lat)
p
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
getwd()
# setwd("~/documents/uw/2nd/INFO 201/a6-mapping-shootings-wjbarng/")
data <- read.csv("data/shootings-2016.csv", stringsAsFactors = FALSE)
library(dplyr)
library(knitr)
library(plotly)
count <- nrow(data)
lives.lost <- summarise(data,sum = sum(killed))
most.affected.cities <- mutate(data, affected = killed + injured) %>% select(city, affected) %>% group_by(city) %>% summarise(sum = sum(affected)) %>% filter(sum == max(sum))
most.killed.date <- filter(data, killed == max(killed)) %>% select(date)
summary <- select(data, state, injured, killed) %>% mutate(total = killed + injured) %>% group_by(state) %>%  summarise(injured = sum(injured),killed = sum(killed), total = sum(total), occurances = n()) %>%arrange(desc(total))
kable(summary)
incident <- filter(data,killed == 0) %>% filter(injured == max(injured))
data.lng <- select(data,lng)
data.lat <- select(data,lat)
#
g <- list(scope='usa',projection = list(type = 'albers usa'),showland = TRUE, landcolor = toRGB("black"), subunitcolor = toRGB("gray85"), countrycolor = toRGB("gray85"), countrywidth = 0.5, subunitwidth = 0.5)
p <- plot_geo(data,lat=data.lat,lon=data.lng) %>% add_markers(text="hi",color=data$killed,symbol = I("square"),size=I(8),hoverinfo = "text") %>% colorbar(title="hi") %>%layout(title="hi",geo=g)
# df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')
#
# # geo styling
# g <- list(
#   scope = 'usa',
#   projection = list(type = 'albers usa'),
#   showland = TRUE,
#   landcolor = toRGB("gray95"),
#   subunitcolor = toRGB("gray85"),
#   countrycolor = toRGB("gray85"),
#   countrywidth = 0.5,
#   subunitwidth = 0.5
# )
#
# p <- plot_geo(df, lat = ~lat, lon = ~long) %>%
#   add_markers(
#     text = ~paste(airport, city, state, paste("Arrivals:", cnt), sep = "<br />"),
#     color = ~cnt, symbol = I("square"), size = I(8), hoverinfo = "text"
#   ) %>%
#   colorbar(title = "Incoming flights<br />February 2011") %>%
#   layout(
#     title = 'Most trafficked US airports<br />(Hover for airport)', geo = g
#   )
o
p
data.lng <- select(data,lng)
data.lat <- select(data,lat)
#
# g <- list(scope='usa',projection = list(type = 'albers usa'),showland = TRUE, landcolor = toRGB("black"), subunitcolor = toRGB("gray85"), countrycolor = toRGB("gray85"), countrywidth = 0.5, subunitwidth = 0.5)
#
# p <- plot_geo(data,lat=data.lat,lon=data.lng) %>% add_markers(text="hi",color=data$killed,symbol = I("square"),size=I(8),hoverinfo = "text") %>% colorbar(title="hi") %>%layout(title="hi",geo=g)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')
# geo styling
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
p <- plot_geo(df, lat = ~lat, lon = ~long) %>%
add_markers(
text = ~paste(airport, city, state, paste("Arrivals:", cnt), sep = "<br />"),
color = ~cnt, symbol = I("square"), size = I(8), hoverinfo = "text"
) %>%
colorbar(title = "Incoming flights<br />February 2011") %>%
layout(
title = 'Most trafficked US airports<br />(Hover for airport)', geo = g
)
p
data.lng <- select(data,lng)
data.lat <- select(data,lat)
#
g <- list(scope='usa',projection = list(type = 'albers usa'),showland = TRUE, landcolor = toRGB("black"), subunitcolor = toRGB("gray85"), countrycolor = toRGB("gray85"), countrywidth = 0.5, subunitwidth = 0.5)
p <- plot_geo(data,lat=data.lat,lon=data.lng) %>%
add_markers(text=paste("killed=",killed,"injured=",injured,sep=""),
color = killed,
symbol = I("square"),
size=I(8),
hoverinfo = "text") %>%
colorbar(title="hi") %>%
layout(title="hi",geo=g)
data.lng <- select(data,lng)
data.lat <- select(data,lat)
#
g <- list(scope='usa',projection = list(type = 'albers usa'),showland = TRUE, landcolor = toRGB("black"), subunitcolor = toRGB("gray85"), countrycolor = toRGB("gray85"), countrywidth = 0.5, subunitwidth = 0.5)
p <- plot_geo(data,lat=data.lat,lon=data.lng) %>%
add_markers(text=paste("killed=",data$killed,"injured=",data$injured,sep=""),
color = killed,
symbol = I("square"),
size=I(8),
hoverinfo = "text") %>%
colorbar(title="hi") %>%
layout(title="hi",geo=g)
data.lng <- select(data,lng)
data.lat <- select(data,lat)
#
g <- list(scope='usa',projection = list(type = 'albers usa'),showland = TRUE, landcolor = toRGB("black"), subunitcolor = toRGB("gray85"), countrycolor = toRGB("gray85"), countrywidth = 0.5, subunitwidth = 0.5)
p <- plot_geo(data,lat=data.lat,lon=data.lng) %>%
add_markers(text=paste("killed=",data$killed,"injured=",data$injured,sep=""),
color = data$killed,
symbol = I("square"),
size=I(8),
hoverinfo = "text") %>%
colorbar(title="hi") %>%
layout(title="hi",geo=g)
# df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')
#
# # geo styling
# g <- list(
#   scope = 'usa',
#   projection = list(type = 'albers usa'),
#   showland = TRUE,
#   landcolor = toRGB("gray95"),
#   subunitcolor = toRGB("gray85"),
#   countrycolor = toRGB("gray85"),
#   countrywidth = 0.5,
#   subunitwidth = 0.5
# )
#
# p <- plot_geo(df, lat = ~lat, lon = ~long) %>%
#   add_markers(
#     text = ~paste(airport, city, state, paste("Arrivals:", cnt), sep = "<br />"),
#     color = ~cnt, symbol = I("square"), size = I(8), hoverinfo = "text"
#   ) %>%
#   colorbar(title = "Incoming flights<br />February 2011") %>%
#   layout(
#     title = 'Most trafficked US airports<br />(Hover for airport)', geo = g
#   )
p
data.lng <- select(data,lng)
data.lat <- select(data,lat)
#
g <- list(scope='usa',projection = list(type = 'albers usa'),showland = TRUE, landcolor = toRGB("black"), subunitcolor = toRGB("gray85"), countrycolor = toRGB("gray85"), countrywidth = 0.5, subunitwidth = 0.5)
p <- plot_geo(data,lat=data.lat,lon=data.lng) %>%
add_markers(text=paste("killed=",data$killed,"injured=",data$injured,sep=""),
color = data$killed,
symbol = I("square"),
size=I(8),
hoverinfo = "text") %>%
colorbar(title="# of killed") %>%
layout(title="mass shooting in 2016",geo=g)
# df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')
#
# # geo styling
# g <- list(
#   scope = 'usa',
#   projection = list(type = 'albers usa'),
#   showland = TRUE,
#   landcolor = toRGB("gray95"),
#   subunitcolor = toRGB("gray85"),
#   countrycolor = toRGB("gray85"),
#   countrywidth = 0.5,
#   subunitwidth = 0.5
# )
#
# p <- plot_geo(df, lat = ~lat, lon = ~long) %>%
#   add_markers(
#     text = ~paste(airport, city, state, paste("Arrivals:", cnt), sep = "<br />"),
#     color = ~cnt, symbol = I("square"), size = I(8), hoverinfo = "text"
#   ) %>%
#   colorbar(title = "Incoming flights<br />February 2011") %>%
#   layout(
#     title = 'Most trafficked US airports<br />(Hover for airport)', geo = g
#   )
p
lat
lng
data.lng <- select(data,lng)
data.lat <- select(data,lat)
g <- list(scope='usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5)
p <- ploy_geo(data, locationmode = "USA-states",size = c(1, 250)) %>%
add_markers(
x=data.lng,y=data.lat,size= data$killed,color = data$killed, hoverinfo = "text",
text=paste("killed=",data$killed,"injured=",data$injured,sep="<br />")
) %>%
layout(title = "mass shooting in 2016", geo =g)
data.lng <- select(data,lng)
data.lat <- select(data,lat)
data$q <- with(data, cut(data$killed, quantile(data$killed)))
g <- list(scope='usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5)
test.data <- mutate(data, affected == killed + injured)
getwd()
# setwd("~/documents/uw/2nd/INFO 201/a6-mapping-shootings-wjbarng/")
data <- read.csv("data/shootings-2016.csv", stringsAsFactors = FALSE)
library(dplyr)
library(knitr)
library(plotly)
count <- nrow(data)
lives.lost <- summarise(data,sum = sum(killed))
most.affected.cities <- mutate(data, affected = killed + injured) %>% select(city, affected) %>% group_by(city) %>% summarise(sum = sum(affected)) %>% filter(sum == max(sum))
most.killed.date <- filter(data, killed == max(killed)) %>% select(date)
summary <- select(data, state, injured, killed) %>% mutate(total = killed + injured) %>% group_by(state) %>%  summarise(injured = sum(injured),killed = sum(killed), total = sum(total), occurances = n()) %>%arrange(desc(total))
kable(summary)
incident <- filter(data,killed == 0) %>% filter(injured == max(injured))
g <- list(scope='usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5)
test.data <- mutate(data, affected == killed + injured)
g <- list(scope='usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5)
test.data <- mutate(data, affected == killed + injured)
g <- list(scope='usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5)
test.data <- mutate(data, affected = killed + injured)
p <- plot_geo(test.data,locationmode = "USA-states",size = c(1, 250)) %>%
add_markers(
x= ~lng,y = ~lat,size = ~affected, color = ~affected, hoverinfo = "text",
text=paste("date: ",data$date,"killed = ",data$killed,"injured = ",data$injured,sep="<br />")
) %>%
layout(title = "mass shooting in 2016", geo =g)
# p <- plot_geo(data,lat = data.lat, lon = data.lng) %>%
#       add_markers(
#         text=paste("killed=",data$killed,"injured=",data$injured,sep="<br />"),
#         color = data$killed,
#         symbol = I("square"),
#         size=data$killed,
#         hoverinfo = "text") %>%
#   colorbar(title="# of killed") %>%
#   layout(title="mass shooting in 2016",geo=g
#   )
# df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')
#
# # geo styling
# g <- list(
#   scope = 'usa',
#   projection = list(type = 'albers usa'),
#   showland = TRUE,
#   landcolor = toRGB("gray95"),
#   subunitcolor = toRGB("gray85"),
#   countrycolor = toRGB("gray85"),
#   countrywidth = 0.5,
#   subunitwidth = 0.5
# )
#
# p <- plot_geo(df, lat = ~lat, lon = ~long) %>%
#   add_markers(
#     text = ~paste(airport, city, state, paste("Arrivals:", cnt), sep = "<br />"),
#     color = ~cnt, symbol = I("square"), size = I(8), hoverinfo = "text"
#   ) %>%
#   colorbar(title = "Incoming flights<br />February 2011") %>%
#   layout(
#     title = 'Most trafficked US airports<br />(Hover for airport)', geo = g
#   )
library(dplyr)
View(sumary)
View(sumaary)
View(summary)
View(most.affected.cities)
count <- nrow(data)
lives.lost <- summarise(data,sum = sum(killed))
most.affected.cities <- mutate(data, affected = killed + injured) %>% select(city, affected) %>% group_by(city) %>% summarise(sum = sum(affected)) %>% filter(sum == max(sum))
test <- paste(most.affected.cities)
most.killed.date <- filter(data, killed == max(killed)) %>% select(date)
t4est
test
count <- nrow(data)
lives.lost <- summarise(data,sum = sum(killed))
most.affected.cities <- mutate(data, affected = killed + injured) %>% select(city, affected) %>% group_by(city) %>% summarise(sum = sum(affected)) %>% filter(sum == max(sum)) %>% select(city)
write <- function(input) {
paste(input)
}
most <- lapply(most.affected.cities,write)
test <- paste(most.affected.cities)
most.killed.date <- filter(data, killed == max(killed)) %>% select(date)
test
most.affected.cities[1]
typeof(most.affected.cities)
most.affected.cities[1]
is.data.frame(most.affected.cities)
count <- nrow(data)
lives.lost <- summarise(data,sum = sum(killed))
most.affected.cities <- (mutate(data, affected = killed + injured) %>% select(city, affected) %>% group_by(city) %>% summarise(sum = sum(affected)) %>% filter(sum == max(sum)))$city
most.killed.date <- filter(data, killed == max(killed)) %>% select(date)
most.affected.cities[1]
getwd()
shiny::runApp('UW/2nd/INFO201/a8-building-apps-wjbarng')
install.packages("tidytext")
getwd()
setwd("~/desktop")
setwd("desktop")
setwd("Desktop")
setwd("~/Desktop")
shiny::runApp('UW/2nd/INFO201/wa-ethnic-detention-2004-2013')
typeof(WA.data$Year)
getwd()
setwd("~/UW/2nd/INFO201/wa-ethnic-detention-2004-2013/")
WA.detention.data <- read.csv('./data/Ethnic_Distribution_of_Detention_Population_2004-2013.csv', check.names = FALSE)
total.WA.pop <- read.csv('./data/added_column.csv', check.names = FALSE)
all.data <- full_join(WA.detention.data,total.WA.pop)
WA.data <- filter(all.data,Year %in% c('# 2004','# 2005','# 2006','# 2007','# 2008','# 2009','# 2010','# 2011','# 2012','# 2013'))
WA.data$Year
typeof(WA.data$Year)
c(WA.data$year,'Total')
runApp()
runApp()
getwd()
runApp()
setwd("~/UW/2nd/INFO201/wa-ethnic-detention-2004-2013/")
source('./scripts/2004_pie_chart.R')
source('./scripts/2013_pie_chart.R')
# Data set retrieved from Data.WA.gov
WA.detention.data <- read.csv('./data/Ethnic_Distribution_of_Detention_Population_2004-2013.csv', check.names = FALSE,stringsAsFactors=FALSE)
# Data found from research - total WA population from 2004-2015
total.WA.pop <- read.csv('./data/added_column.csv', check.names = FALSE,stringsAsFactors=FALSE)
# Join data sets
all.data <- full_join(WA.detention.data, total.WA.pop, by = 'Year')
# Remove unneeded columns
all.data$Total <- NULL
all.data$`Total Num People in WA` <- NULL
# Remove percent signs
all.data$White <- gsub("%", "", all.data$White)
all.data$Black <- gsub("%", "", all.data$Black)
all.data$`Native American` <- gsub("%", "", all.data$`Native American`)
all.data$Hispanic <- gsub("%", "", all.data$Hispanic)
all.data$`Asian & Pacific Is.` <- gsub("%", "", all.data$`Asian & Pacific Is.`)
all.data$`Other/Unknown` <- gsub("%", "", all.data$`Other/Unknown`)
# 2004 pie chart set up
data.2004 <- all.data %>% filter(Year == "2004%")
data.2004$Year <- NULL # unneeded column now
# Flip rows with columns
data.2004.flipped <- data.frame(t(data.2004))
# 2013 pie chart set up
data.2013 <- all.data %>% filter(Year == "2013%")
data.2013$Year <- NULL # unneeded column now
data.2013.flipped <- data.frame(t(data.2013))
#WA data
WA.data <- full_join(WA.detention.data, total.WA.pop, by = 'Year')
WA.data <-filter(WA.data,Year %in% c('# 2004','# 2005','# 2006','# 2007','# 2008','# 2009','# 2010','# 2011','# 2012','# 2013'))
WA.data[,-1] <- as.numeric(gsub(",", "", as.matrix(WA.data[,-1])))
View(WA.data)
my.data <- filter(WA.data, Year %in% input$var)
total.WA <- my.data$`Total Num People in WA`
my.data <- select(my.data,White,Black,`Native American`,`Asian & Pacific Is.`,Hispanic,`Other/Unknown`,`Total`)
my.data <- my.data/total.WA *100
my.data <- data.frame(t(my.data))
my.data <- filter(WA.data, Year %in% input$var)
runApp()
>>>>>>> 6cca5a7da3d9086fb0d35ddaa7e5cd8777c8552c
=======
>>>>>>> Best fit line add
